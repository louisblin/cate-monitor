#!/bin/bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/"
url="https://cate.doc.ic.ac.uk/"
out="$DIR""res/out.txt"
cate_old_json="$DIR""res/cate.old.json"

TERMINAL_NOTIFIER="/usr/local/bin/terminal-notifier"
NOTIF_ARGS="-sender com.apple.Terminal \
            -sound default -open \"$url\" \
            -appIcon res/cateIcon.gif"

PING="/sbin/ping"
TIMEOUT="/usr/local/bin/gtimeout"
PHANTOMJS="/usr/local/bin/phantomjs"
PHANTOM_FILE="$DIR""cate.js"

# ----------

# starting cron job...
date
echo $PATH
echo
echo "Display unfinished phantomjs processes"
ps aux | grep phantom | grep -v "grep"
echo

# abort if offline
has_internet_connection() {
  # function nesting to suppress Alarm Clock:14 on SIGALARM caused by -t 1
  results=`$PING -c 1 -t 1 google.com >/dev/null 2>&1`
  echo $?
}
[[ `has_internet_connection` -ne 0 ]] && echo "Offline, abort." && exit 1

# parse cate and update record, 45sec timeout
$TIMEOUT --signal=SIGINT 45 $PHANTOMJS "$PHANTOM_FILE" > "$out"
[[ $? -ne 0 ]] && echo "PhantomJS page load timeout, abort." && exit 1

cat "$out"

# ignore new grades if no cate_old_json file (typically during first run)
if [[ ! -e "$cate_old_json" ]]; then
  echo 'No file "$cate_old_json", continue to next run...'
  cat "$out" | head -n 1 > "$cate_old_json"
  exit
else
  cat "$out" | head -n 1 > "$cate_old_json"
fi

cat "$out" | head -n 1 > "$cate_old_json"
diff=`cat "$out" | tail -n +2`
echo
echo "$diff"

# if new grades detected
if [[ -n "$diff" ]]; then

  # for each new grade, send a notification
  cat "$out" | tail -n +2 | while read g
  do

    echo "[cate-monitor] process grade line $g"
    subject=`   echo $g | grep -o '^[^|]*'`
    coursework=`echo $g | sed  -n 's/.*||\([^|]*\)||.*/\1/p'`
    grade=`     echo $g | grep -o '[^|]*$'`

    # send notification
    if [ "$grade" != "n/a" ] && \
       [ "$grade" != "N/P" ]; then
      $TERMINAL_NOTIFIER $NOTIF_ARGS \
        -title "Cate grades update" \
        -subtitle "$subject" \
        -message "Got an $grade for $coursework"
    fi

  done
fi
